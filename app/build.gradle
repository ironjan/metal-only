// use semantic versioning: http://semver.org/
// only change _after_ merge requests
def versionMajor = 0  // incompatible API changes
def versionMinor = 6  // added functionality in a backwards-compatible manner
def versionPatch = 8  // backwards-compatible bug fixes
def versionBuild = 0  // bump for dogfood builds, public betas, etc.

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "project-report"
apply plugin: "com.github.ben-manes.versions"

configurations {
    apt
    ktlint
}

android {
    compileSdkVersion project.properties.compileSdkVersion
    buildToolsVersion project.properties.buildToolsVersion

    packagingOptions {
        // prevents Error: duplicate files during packaging of APK
        // no wildcard support yet
        exclude "META-INF/LICENSE"
        exclude "META-INF/NOTICE"
        exclude "META-INF/notice.txt"
        exclude "META-INF/license.txt"
    }

    defaultConfig {
        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
        if (versionBuild == 0) {
          versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        }
        else {
          versionName "${versionMajor}.${versionMinor}.${versionPatch}-${versionBuild}"
        }

        applicationId "com.codingspezis.android.metalonly.player"
        minSdkVersion project.properties.minSdkVersion
        targetSdkVersion project.properties.targetSdkVersion

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "METAL_ONLY_WUNSCHSCRIPT_POST_URL", "\"https://www.metal-only.de/wunschgruss.html?do=save\""

        buildConfigField "String", "WISH_SUCCESS", "\"Wunsch/Gruss wurde erfolgreich übermittelt\""
        buildConfigField "String", "WISH_FORM_INVALID", "\"Fehler: Bitte Wunsch/Gruss und einen Nick angeben\""
        buildConfigField "String", "WISH_NO_WISHES_POSSIBLE", "\"Wünsche und Grüsse sind nur in der moderierten Sendezeit möglich!\""
    }

    sourceSets {
        main {
            manifest.srcFile "AndroidManifest.xml"
            java.srcDirs += "src/main/kotlin"
        }
        test.java.srcDirs += 'src/test/kotlin'
    }

    if (project.hasProperty("metalonly.signing")
            && new File(project.property("metalonly.signing") + ".gradle").exists()) {
        apply from: project.property("metalonly.signing") + ".gradle";
        println("Applied production signing config")
    }
    else{
        println("Project does not have production signing config")
    }
    if (project.hasProperty("metalonly.variants")
            && new File(project.property("metalonly.variants") + ".gradle").exists()) {
        apply from: project.property("metalonly.variants") + ".gradle";
        println("Applied metalonly.variants config")
    }
    else{
        println("Project does not have metalonly.variants config")
    }

    lintOptions {
        disable "InvalidPackage"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
    }

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !travisBuild
    }
}

dependencies {
    apk project(path: ":core")
    compile project(path: ":core")

    apk project(path: ":metal-only-client-library")
    compile project(path: ":metal-only-client-library")
    
    compile "com.android.support:appcompat-v7:$appcompat_v7_version"
    compile "com.android.support:support-v4:$support_v4_version"
    compile "com.fasterxml.jackson.core:jackson-databind:2.8.6"
    compile "org.springframework.android:spring-android-rest-template:$springAndroidRestTemplate"
    compile "org.slf4j:slf4j-android:$slf4jAndroid_version"
    compile "org.androidannotations:androidannotations-api:$androidannotations_version"
    compile "org.androidannotations:rest-spring-api:$androidannotations_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
        
    kapt "org.androidannotations:androidannotations:$androidannotations_version"
    kapt "org.androidannotations:rest-spring:$androidannotations_version"
    
    ktlint "com.github.shyiko:ktlint:$ktlint_version"
    
    testCompile "junit:junit:$junit_version"
    
    androidTestCompile("com.android.support.test.espresso:espresso-core:$espresso_version", {
        exclude group: "com.android.support", module: "support-annotations"
    })
}

kapt {
    generateStubs = true
    arguments {
        arg("androidManifestFile", variant.outputs[0].processResourcesTask.manifestFile)
        arg("resourcePackageName", android.defaultConfig.applicationId)
    }
}

task ktlint(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}

check.dependsOn ktlint

task ktlintFormat(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

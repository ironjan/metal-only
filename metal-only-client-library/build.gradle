apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"

android {
    compileSdkVersion project.properties.compileSdkVersion

    packagingOptions {
        // prevents Error: duplicate files during packaging of APK
        // no wildcard support yet
        exclude "META-INF/LICENSE"
        exclude "META-INF/NOTICE"
        exclude "META-INF/notice.txt"
        exclude "META-INF/license.txt"
    }
    
    defaultConfig {
        minSdkVersion project.properties.minSdkVersion
targetSdkVersion project.properties.targetSdkVersion
        versionCode 1
        versionName "0.1"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "METAL_ONLY_API_BASE_URL", "\"https://www.metal-only.de/botcon/mob.php?action=\""
        buildConfigField "String", "API_STATS_PATH", "\"stats\""
        buildConfigField "String", "API_PLAN_PATH", "\"plannew\""
        buildConfigField "String", "API_PLAN_WITH_STATS_PATH", "\"all\""

        buildConfigField "String", "METAL_ONLY_WUNSCHSCRIPT_POST_URL", "\"https://www.metal-only.de/wunschgruss.html?do=save\""

        buildConfigField "String", "WISH_SUCCESS", "\"Wunsch/Gruss wurde erfolgreich übermittelt\""
        buildConfigField "String", "WISH_FORM_INVALID", "\"Fehler: Bitte Wunsch/Gruss und einen Nick angeben\""
        buildConfigField "String", "WISH_NO_WISHES_POSSIBLE", "\"Wünsche und Grüsse sind nur in der moderierten Sendezeit möglich!\""

        manifestPlaceholders = [fabric_io_id: "b4ef28412703339e2e2ad6f8459433e67a9a64ce"] /* replace this with your own key if necessary */
    }

    lintOptions {
        disable "InvalidPackage"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += 'src/test/kotlin'
    }

    if(project.hasProperty("metalonly.fabric.io")
            && new File(project.property("metalonly.fabric.io") + ".gradle").exists()) {
        apply from: project.property("metalonly.fabric.io") + ".gradle";
        println("Applied fabric.io / crashlytics settings.")
    }else{
        println("Project does not have fabric.io / crashlytics settings.")
    }

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !travisBuild
    }
}

dependencies {
    implementation project(path: ":core")

    androidTestImplementation("com.android.support.test.espresso:espresso-core:$espresso_version", {
        exclude group: "com.android.support", module: "support-annotations"
    })

    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation 'com.hypertrack:hyperlog:0.0.10'
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "org.springframework.android:spring-android-rest-template:$spring_android_rest_template_version"
    implementation "org.androidannotations:androidannotations-api:$androidannotations_version"
    implementation "org.androidannotations:rest-spring-api:$androidannotations_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'com.google.code.gson:gson:2.8.5'

    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.14'

    kapt "org.androidannotations:androidannotations:$androidannotations_version"
    kapt "org.androidannotations:rest-spring:$androidannotations_version"

    implementation "com.github.kittinunf.fuel:fuel:$fuel_version" //for JVM
    implementation "com.github.kittinunf.fuel:fuel-android:$fuel_version" //for Android
    implementation "com.github.kittinunf.fuel:fuel-rxjava:$fuel_version" //for RxJava support
    implementation "com.github.kittinunf.fuel:fuel-gson:$fuel_version" //for Gson support
    implementation "io.arrow-kt:arrow-core:$arrow_version"


    testImplementation "junit:junit:$junit_version"
}


kapt {
    correctErrorTypes = true

    arguments {
        arg("androidManifestFile", variant.outputs[0]?.processResources?.manifestFile ?: "")
    }
}
